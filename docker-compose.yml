version: '3.8'

services:
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command:  python -m debugpy --listen 0.0.0.0:5678 -m app --wait-for-client --multiprocess -m FLASK_APP=app.py flask run -h 0.0.0.0 -p 5000
    environment:
      - FLASK_DEBUG=1
      - FLASK_APP=app.py
    volumes:
      - ./:/usr/src/app
    ports:
      - 5000:5000
      - 5678:5678
    env_file:
      - ./.env.dev
    stdin_open: true
    depends_on:
      - db
    entrypoint: [ "python", "-m", "debugpy", "--listen", "0.0.0.0:5678", "-m", "app",  "--wait-for-client", "--multiprocess", "-m", "flask", "run", "-h", "0.0.0.0", "-p", "5000" ]

  db:
    image: postgres:13-alpine
    volumes:
      - pgdata:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=hello_flask
      - POSTGRES_PASSWORD=hello_flask
      - POSTGRES_DB=hello_flask_dev
    ports:
      - 5432:5432

  test_db:
    image: postgres:12
    container_name: postgres
    environment:
      # allow anyone to connect - even without a password
      # only use for running locally or in CI/CD
      - POSTGRES_USER=test_flask
      - POSTGRES_PASSWORD=test_flask
      - POSTGRES_DB=test_flask_dev
    # postgres image per default runs on port 5432
    # we need to expose the container to the host machine so we can run our tests
    # if you also run Postgres locally, change the docker host port to something else
    # and update your index.js file inside the config folder
    ports:
      - '5432:5432'
    volumes:
      # docker will run SQL files that are copied to /docker-entrypoint-initdb.d automatically
      # this gives us an easy way to run migrations / create db tables
      # the order in which they are run is determined by the prefix
      # so always prefix your migration files with 01_, 02_, etc
      - ./migrations:/docker-entrypoint-initdb.d

volumes:
  pgdata: